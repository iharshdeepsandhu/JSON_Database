<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="JsonDatabaseTest" tests="1" skipped="0" failures="1" errors="0" timestamp="2022-10-22T13:16:04" hostname="DESKTOP-7J3R20O" time="1.194">
  <properties/>
  <testcase name="start" classname="JsonDatabaseTest" time="1.194">
    <failure message="java.lang.AssertionError: Wrong answer in test #3&#10;&#10;The JSON element at path &quot;/value/rocket/launches&quot; should be string, found number&#10;&#10;Full JSON:&#10;{&#10;  &quot;response&quot;: &quot;OK&quot;,&#10;  &quot;value&quot;: {&#10;    &quot;rocket&quot;: {&#10;      &quot;launches&quot;: 88.0&#10;    }&#10;  }&#10;}&#10;&#10;Please find below the output of your program during this failed test.&#10;&#10;---&#10;&#10;Arguments for Main: -t set -k 1 -v &quot;Hello world!&quot;&#10;Arguments for Main: -in setFile.json&#10;Arguments for Main: -in getFile.json&#10;Arguments for Main: -in updateFile.json&#10;Arguments for Main: -in secondGetFile.json&#10;&#10;Server started!&#10;Client started!&#10;Sent: {&quot;type&quot;:&quot;set&quot;,&quot;key&quot;:&quot;1&quot;,&quot;value&quot;:&quot;Hello world!&quot;}&#10;Received: {&quot;response&quot;:&quot;OK&quot;}&#10;Client started!&#10;Sent: {&quot;type&quot;:&quot;set&quot;,&quot;key&quot;:&quot;person&quot;,&quot;value&quot;:{&quot;name&quot;:&quot;Elon Musk&quot;,&quot;car&quot;:{&quot;model&quot;:&quot;Tesla Roadster&quot;,&quot;year&quot;:&quot;2018&quot;},&quot;rocket&quot;:{&quot;name&quot;:&quot;Falcon 9&quot;,&quot;launches&quot;:&quot;87&quot;}}}&#10;Received: {&quot;response&quot;:&quot;OK&quot;}&#10;Client started!&#10;Sent: {&quot;type&quot;:&quot;get&quot;,&quot;key&quot;:[&quot;person&quot;,&quot;name&quot;]}&#10;Received: {&quot;response&quot;:&quot;OK&quot;,&quot;value&quot;:&quot;Elon Musk&quot;}&#10;Client started!&#10;Sent: {&quot;type&quot;:&quot;set&quot;,&quot;key&quot;:[&quot;person&quot;,&quot;rocket&quot;,&quot;launches&quot;],&quot;value&quot;:&quot;88&quot;}&#10;{1=Hello world!, person={name=Elon Musk, car={model=Tesla Roadster, year=2018}, rocket={name=Falcon 9, launches=87}}}&#10;{launches=88.0}&#10;{launches=88}&#10;{rocket={launches=88.0}}&#10;{rocket={launches=88.0}}&#10;{person={rocket={launches=88.0}}}&#10;{person={rocket={launches=88.0}}}&#10;{rocket={launches=88.0}}&#10;{1=Hello world!, person={rocket={launches=88.0}}}&#10;Received: {&quot;response&quot;:&quot;OK&quot;}&#10;Client started!&#10;Sent: {&quot;type&quot;:&quot;get&quot;,&quot;key&quot;:[&quot;person&quot;]}&#10;Received: {&quot;response&quot;:&quot;OK&quot;,&quot;value&quot;:{&quot;rocket&quot;:{&quot;launches&quot;:88.0}}}" type="java.lang.AssertionError">java.lang.AssertionError: Wrong answer in test #3

The JSON element at path &quot;/value/rocket/launches&quot; should be string, found number

Full JSON:
{
  &quot;response&quot;: &quot;OK&quot;,
  &quot;value&quot;: {
    &quot;rocket&quot;: {
      &quot;launches&quot;: 88.0
    }
  }
}

Please find below the output of your program during this failed test.

---

Arguments for Main: -t set -k 1 -v &quot;Hello world!&quot;
Arguments for Main: -in setFile.json
Arguments for Main: -in getFile.json
Arguments for Main: -in updateFile.json
Arguments for Main: -in secondGetFile.json

Server started!
Client started!
Sent: {&quot;type&quot;:&quot;set&quot;,&quot;key&quot;:&quot;1&quot;,&quot;value&quot;:&quot;Hello world!&quot;}
Received: {&quot;response&quot;:&quot;OK&quot;}
Client started!
Sent: {&quot;type&quot;:&quot;set&quot;,&quot;key&quot;:&quot;person&quot;,&quot;value&quot;:{&quot;name&quot;:&quot;Elon Musk&quot;,&quot;car&quot;:{&quot;model&quot;:&quot;Tesla Roadster&quot;,&quot;year&quot;:&quot;2018&quot;},&quot;rocket&quot;:{&quot;name&quot;:&quot;Falcon 9&quot;,&quot;launches&quot;:&quot;87&quot;}}}
Received: {&quot;response&quot;:&quot;OK&quot;}
Client started!
Sent: {&quot;type&quot;:&quot;get&quot;,&quot;key&quot;:[&quot;person&quot;,&quot;name&quot;]}
Received: {&quot;response&quot;:&quot;OK&quot;,&quot;value&quot;:&quot;Elon Musk&quot;}
Client started!
Sent: {&quot;type&quot;:&quot;set&quot;,&quot;key&quot;:[&quot;person&quot;,&quot;rocket&quot;,&quot;launches&quot;],&quot;value&quot;:&quot;88&quot;}
{1=Hello world!, person={name=Elon Musk, car={model=Tesla Roadster, year=2018}, rocket={name=Falcon 9, launches=87}}}
{launches=88.0}
{launches=88}
{rocket={launches=88.0}}
{rocket={launches=88.0}}
{person={rocket={launches=88.0}}}
{person={rocket={launches=88.0}}}
{rocket={launches=88.0}}
{1=Hello world!, person={rocket={launches=88.0}}}
Received: {&quot;response&quot;:&quot;OK&quot;}
Client started!
Sent: {&quot;type&quot;:&quot;get&quot;,&quot;key&quot;:[&quot;person&quot;]}
Received: {&quot;response&quot;:&quot;OK&quot;,&quot;value&quot;:{&quot;rocket&quot;:{&quot;launches&quot;:88.0}}}
	at org.junit.Assert.fail(Assert.java:89)
	at org.hyperskill.hstest.stage.StageTest.start(StageTest.java:203)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
	at jdk.proxy1/jdk.proxy1.$Proxy2.processTestClass(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$2.run(TestWorker.java:176)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
</failure>
  </testcase>
  <system-out><![CDATA[?[1;31m
Start test 1?[0m
Client started!
Sent: {"type":"exit"}
Received: {"response":"OK"}
?[1;31m
Start test 2?[0m
?[1;31m
Start test 3?[0m
 Server started!
Client started!
Sent: {"type":"set","key":"1","value":"Hello world!"}
Received: {"response":"OK"}
Client started!
Sent: {"type":"set","key":"person","value":{"name":"Elon Musk","car":{"model":"Tesla Roadster","year":"2018"},"rocket":{"name":"Falcon 9","launches":"87"}}}
Received: {"response":"OK"}
Client started!
Sent: {"type":"get","key":["person","name"]}
Received: {"response":"OK","value":"Elon Musk"}
Client started!
Sent: {"type":"set","key":["person","rocket","launches"],"value":"88"}
{1=Hello world!, person={name=Elon Musk, car={model=Tesla Roadster, year=2018}, rocket={name=Falcon 9, launches=87}}}
{launches=88.0}
{launches=88}
{rocket={launches=88.0}}
{rocket={launches=88.0}}
{person={rocket={launches=88.0}}}
{person={rocket={launches=88.0}}}
{rocket={launches=88.0}}
{1=Hello world!, person={rocket={launches=88.0}}}
Received: {"response":"OK"}
Client started!
Sent: {"type":"get","key":["person"]}
Received: {"response":"OK","value":{"rocket":{"launches":88.0}}}
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
