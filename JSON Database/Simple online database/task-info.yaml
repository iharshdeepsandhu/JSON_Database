type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;


    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.Socket;


    public class Main {



        public static void main(String[] args) throws IOException {

            String address = "127.0.0.1";
            int port = 23456;

            try{Socket socket = new Socket(InetAddress.getByName(address), port);
                DataInputStream input = new DataInputStream(socket.getInputStream());
                DataOutputStream output = new DataOutputStream(socket.getOutputStream());
                System.out.println("Client started!");


                String stringText = "Give me a record # 12";
                output.writeUTF(stringText);
                System.out.println("Sent: " +stringText);

                String msg = input.readUTF();
                System.out.print( "Received: " +msg);

            }catch(IOException e){
                e.printStackTrace();
            }
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |-
    package server;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.*;
    import java.util.ArrayList;
    import java.util.Scanner;


    public class Main   {


        public static void main(String[] args) throws IOException {
            //connecting to client
            String address = "127.0.0.1";
            int port = 23456;
            try(ServerSocket server = new ServerSocket(port, 50, InetAddress.getByName(address))) {
                System.out.println(" Server started!");
                try(Socket socket = server.accept())
                {

                    DataInputStream input = new DataInputStream(socket.getInputStream());
                    DataOutputStream output  = new DataOutputStream(socket.getOutputStream());
                    String recieved = input.readUTF();
                    System.out.println("Received: "+recieved);
                    String send = "A record # 12 was sent!";

                    output.writeUTF(send);
                    System.out.println("Sent: " + send);


                }
            }catch(IOException e){
                e.printStackTrace();
            }





            //intialising database
                    /*Scanner scan = new Scanner(System.in);
                    ArrayList<String> database = new ArrayList<>(100);
                    for (int i = 0; i < 100; i++) {
                        database.add("");
                    }
                    //taking input

                    while(scan.hasNext()){
                        String command = scan.nextLine();
                        String[] strArr = command.split(" ");


                        if (strArr[0].equals("set") || strArr[0].equals("get")
                                || strArr[0].equals("delete")
                                || strArr[0].equals("exit")
                        ) {
                            if(strArr[0].equals("exit"))
                                break;

                            else{
                                int second = Integer.parseInt(strArr[1]);


                                if (strArr[0].equals("set") && (second <= 100) && second > 0) {
                                    StringBuilder s = new StringBuilder();
                                    for (int j = 2; j < strArr.length; j++) {

                                        s.append(strArr[j] + " ");
                                    }

                                    database.add(second - 1, String.valueOf(s));
                                    System.out.println("OK");

                                }

                                else if (strArr[0].equals("get")) {
                                    if (second > database.size() || second < 0 || database.get(second - 1).equals("")){
                                        System.out.println("ERROR");
                                    }
                                    else{
                                        System.out.println(database.get(second - 1));

                                    }
                                }
                                else if (strArr[0].equals("delete")) {

                                    if (second <= 100 && second > 0){
                                        database.add(second - 1, "");
                                        System.out.println("OK");
                                    }

                                    else{
                                        System.out.println("ERROR");
                                    }

                                }

                            }
                        }
                        else
                            System.out.println("ERROR");
                    }}



    */

        }}
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";

        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";
        private static final String WRONG_GET_EMPTY_CELL_WITH_ERROR = "When a client tries to get an empty cell from " +
                "the server, the server should response with 'ERROR' and the client should print that response";
        private static final String WRONG_SET_VALUE_TO_CELL_WITH_OK = "When a client tries to save a value on" +
                " the server, the server should save the value and response with '" + OK_STATUS + "'. The client should " +
                "print that response";
        private static final String WRONG_GET_VALUE = "When a client tries to get a not empty cell from the server, " +
                "the server should response with a value of the cell. The client should pint received value.\n" +
                "May be the problem is in processing 'set' action:\nIf the specified cell already contains " +
                "information, you should simply rewrite it.";
        private static final String WRONG_DELETE = "When a client tries to delete a value from the cell on the server," +
                " the server should assign an empty string to this cell and response with '" + OK_STATUS + "'.";
        private static final String WRONG_DELETE_EMPTY = "When a client tries to delete a cell with an empty value from the server," +
                " the server should assign an empty string to this cell and response with '" + OK_STATUS + "'.";
        private static final String WRONG_DELETE_INDEX_OUT_OF_BOUNDS = "When a user tries to delete a cell which index " +
                "is less than 0 or greater than 1000, the server should response with  '" + ERROR_STATUS + "'.";

        @DynamicTest(order = 1)
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client = getClient();
            client.start("-t", "exit");

            try {
                Thread.sleep(50);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 2)
        CheckResult testInputs() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR);
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "1", "-m", "Hello world!");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "1", "-m", "HelloWorld!");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            expectedValue = "HelloWorld!";
            if (!output.contains(expectedValue)) {
                return CheckResult.wrong(WRONG_GET_VALUE +
                        "\nExpected:\n" + expectedValue + "\nYour output:\n" + output);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR + "\nMay be after deleting a cell you didn't " +
                        "assign an empty value to it.");
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "55", "-m", "Some text here");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "55");
            expectedValue = "Some text here";
            if (!output.contains(expectedValue)) {
                return CheckResult.wrong(WRONG_GET_VALUE +
                        "\nExpected:\n" + expectedValue + "\nYour output:\n" + output);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "56");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "55");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "56");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "100");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1001");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_INDEX_OUT_OF_BOUNDS);
            }

            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }


        private static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        private static TestedProgram getServer() {
            return new TestedProgram("server");
        }

        private static void stopServer() {
            TestedProgram client = getClient();
            client.start("-t", "exit");
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/5492#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 02 Oct 2022 10:45:38 UTC"
record: 3
